"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.3.2
(function () {
  var SyncTubeClient, SyncTubeClient_CommandBar, SyncTubeClient_History, SyncTubeClient_Player_HtmlFrame, SyncTubeClient_Player_HtmlImage, SyncTubeClient_Player_HtmlVideo, SyncTubeClient_Player_StuiBanned, SyncTubeClient_Player_StuiCreateForm, SyncTubeClient_Player_StuiKicked, SyncTubeClient_Player_Youtube, ref;
  window.SyncTubeClient_Util = {
    getHashParams: function getHashParams() {
      var j, key, kv, kvp, len, parts, result;
      result = {};

      if (window.location.hash) {
        parts = window.location.hash.substr(1).split("&");

        for (j = 0, len = parts.length; j < len; j++) {
          kv = parts[j];
          kvp = kv.split("=");
          key = kvp.shift();
          result[key] = kvp.join("=");
        }
      }

      return result;
    },
    delay: function delay(ms, func) {
      return setTimeout(func, ms);
    }
  };
  window.SyncTubeClient_Network = {
    init: function init() {
      var base, base1, base2, discoveredHost, discoveredPort, discoveredProtocol;
      discoveredHost = document.location.hostname;
      discoveredPort = document.location.port || (document.location.protocol === "https:" ? 443 : 80);
      discoveredProtocol = document.location.protocol === "https:" ? "wss" : "ws";

      if ((base = this.opts).wsIp == null) {
        base.wsIp = $("meta[name=synctube-server-ip]").attr("content") || discoveredHost;
      }

      if ((base1 = this.opts).wsPort == null) {
        base1.wsPort = $("meta[name=synctube-server-port]").attr("content") || discoveredPort;
      }

      if ((base2 = this.opts).wsProtocol == null) {
        base2.wsProtocol = $("meta[name=synctube-server-protocol]").attr("content") || discoveredProtocol;
      }

      this.dontBroadcast = false;
      return this.reconnect = true;
    },
    start: function start() {
      this.openWSconnection();
      return this.detectBrokenConnection();
    },
    openWSconnection: function openWSconnection() {
      var _this = this;

      var address; // mozilla fallback

      window.WebSocket = window.WebSocket || window.MozWebSocket; // if browser doesn't support WebSocket, just show some notification and exit

      if (!window.WebSocket) {
        this.content.html($("<p>", {
          text: "Sorry, but your browser doesn't support WebSocket."
        }));
        this.status.hide();
        this.input.hide();
        return;
      } // open connection


      address = "".concat(this.opts.wsProtocol, "://").concat(this.opts.wsIp, ":").concat(this.opts.wsPort, "/cable");
      this.debug("Opening connection to ".concat(address));
      this.connection = new WebSocket(address);

      this.connection.onopen = function () {
        return _this.debug("WS connection opened");
      };

      return this.connection.onerror = function (error) {
        _this.error("WS connection encountered an error", error);

        return _this.content.html($("<p>", {
          text: "Sorry, but there's some problem with your connection or the server is down."
        }));
      };
    },
    detectBrokenConnection: function detectBrokenConnection() {
      var _this2 = this;

      return setInterval(function () {
        if (_this2.connection.readyState !== 1) {
          _this2.status.text("Error");

          _this2.disableInput().val("Unable to communicate with the WebSocket server. Please reload!");

          _this2.dontBroadcast = true;
          return _this2.delay(1000, function () {
            if (_this2.reconnect) {
              return window.location.reload();
            }
          });
        }
      }, 3000);
    },
    listen: function listen() {
      var _this3 = this;

      return this.connection.onmessage = function (message) {
        var error, json;

        try {
          json = JSON.parse(message.data);
        } catch (error1) {
          error = error1;

          _this3.error("Invalid JSON", message.data, error);

          return;
        }

        switch (json.type) {
          case "code":
            //@debug "received CODE", json.data
            if (_this3["CMD_".concat(json.data.type)] != null) {
              return _this3["CMD_".concat(json.data.type)](json.data);
            } else {
              return _this3.warn("no client implementation for CMD_".concat(json.data.type));
            }

            break;

          case "message":
            //@debug "received MESSAGE", json.data
            return _this3.addMessage(json.data);

          default:
            return _this3.warn("Hmm..., I've never seen JSON like this:", json);
        }
      };
    },
    startBroadcast: function startBroadcast() {
      var _this4 = this;

      if (this.broadcastStateInterval != null) {
        return;
      }

      return this.broadcastStateInterval = setInterval(function () {
        return _this4.broadcastState();
      }, this.opts.synced.packetInterval);
    },
    stopBroadcast: function stopBroadcast() {
      clearInterval(this.broadcastStateInterval);
      return this.broadcastStateInterval = null;
    },
    sendControl: function sendControl(cmd) {
      if (!this.control) {
        return;
      }

      this.debug("send control", cmd);
      return this.connection.send(cmd);
    },
    broadcastState: function broadcastState() {
      var ev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (ref = this.player) != null ? ref.getState() : void 0;
      var packet, ref1, ref2, ref3, ref4, state;

      if (this.dontBroadcast) {
        return;
      }

      state = function () {
        switch (ev) {
          case -666:
            return "uninitialized";

          case -1:
            return "unstarted";

          case 0:
            return "ended";

          case 1:
            return "playing";

          case 2:
            return "paused";

          case 3:
            return "buffering";

          case 5:
            return "cued";

          default:
            return "ready";
        }
      }();

      packet = {
        state: state,
        istate: ev,
        seek: (ref1 = this.player) != null ? ref1.getCurrentTime() : void 0,
        playtime: (ref2 = this.player) != null ? ref2.getDuration() : void 0,
        loaded_fraction: (ref3 = this.player) != null ? ref3.getLoadedFraction() : void 0,
        url: (ref4 = this.player) != null ? ref4.getUrl() : void 0
      };
      this.lastPacketSent = new Date();
      return this.connection.send("!packet:" + JSON.stringify(packet));
    }
  };
  window.SyncTubeClient_ControlCodes = {
    CMD_server_settings: function CMD_server_settings(data) {
      var k, results, v;
      results = [];

      for (k in data) {
        v = data[k];

        if (k === "type") {
          continue;
        }

        this.debug("Accepting server controlled setting", k, "was", this.opts.synced[k], "new", v);
        results.push(this.opts.synced[k] = v);
      }

      return results;
    },
    CMD_ack: function CMD_ack() {
      return this.enableInput();
    },
    CMD_session_kicked: function CMD_session_kicked(info) {
      var _this5 = this;

      return this.delay(100, function () {
        // timeout because reasons (YT restoring view? but we destroyed it already... dunno)
        _this5.CMD_disconnected();

        return _this5.CMD_desired({
          ctype: "StuiKicked",
          info: info
        });
      });
    },
    CMD_banned: function CMD_banned(info) {
      var _this6 = this;

      return this.delay(100, function () {
        // timeout because reasons (YT restoring view? but we destroyed it already... dunno)
        _this6.CMD_disconnected();

        return _this6.CMD_desired({
          ctype: "StuiBanned",
          info: info
        });
      });
    },
    CMD_kicked: function CMD_kicked(info) {
      var _this7 = this;

      return this.delay(100, function () {
        // timeout because reasons (YT restoring view? but we destroyed it already... dunno)
        return _this7.CMD_desired({
          ctype: "StuiKicked",
          info: info
        });
      });
    },
    CMD_disconnected: function CMD_disconnected() {
      this.CMD_unsubscribe();
      this.CMD_lost_control();
      return this.reconnect = false;
    },
    CMD_taken_control: function CMD_taken_control() {
      var ref1;
      this.control = true;
      return (ref1 = this.commandBar) != null ? ref1.show() : void 0;
    },
    CMD_lost_control: function CMD_lost_control() {
      var ref1;
      this.control = false;
      return (ref1 = this.commandBar) != null ? ref1.hide() : void 0;
    },
    CMD_unsubscribe: function CMD_unsubscribe() {
      this.CMD_ui_clear({
        component: "clients"
      });
      return this.CMD_video_action({
        action: "destroy"
      });
    },
    CMD_desired: function CMD_desired(data) {
      var e, klass, ref1, ref2;

      if (data.ctype !== ((ref1 = this.player) != null ? ref1.ctype : void 0)) {
        this.CMD_video_action({
          action: "destroy"
        });
        klass = "SyncTubeClient_Player_".concat(data.ctype);

        try {
          this.player = new window[klass](this);
        } catch (error1) {
          e = error1;
          this.addError("Failed to load player ".concat(data.ctype, "! ").concat(e.toString().replace("window[klass]", klass)));
          throw e;
          return;
        }
      }

      this.player.updateDesired(data);
      return (ref2 = this.commandBar) != null ? ref2.updateDesired(data) : void 0;
    },
    CMD_ui_clear: function CMD_ui_clear(data) {
      switch (data.component) {
        case "chat":
          return this.content.html("");

        case "clients":
          return this.clients.html("");

        case "player":
          return this.CMD_video_action({
            action: "destroy"
          });
      }
    },
    CMD_ui_clipboard_poll: function CMD_ui_clipboard_poll(data) {
      if (data.action === "permission") {
        return navigator.clipboard.readText();
      }
    },
    CMD_ui_chat_show: function CMD_ui_chat_show(data) {
      var _this8 = this;

      return this.content.show(200, function () {
        return _this8.content.scrollTop(_this8.content.prop("scrollHeight"));
      });
    },
    CMD_ui_chat_hide: function CMD_ui_chat_hide(data) {
      return this.content.hide(200);
    },
    CMD_ui_chat_toggle: function CMD_ui_chat_toggle(data) {
      var _this9 = this;

      return this.content.toggle(200, function () {
        return _this9.content.scrollTop(_this9.content.prop("scrollHeight"));
      });
    },
    CMD_video_action: function CMD_video_action(data) {
      var ref1, ref2, ref3, ref4;

      switch (data.action) {
        case "resume":
          return (ref1 = this.player) != null ? ref1.play() : void 0;

        case "pause":
          return (ref2 = this.player) != null ? ref2.pause() : void 0;

        case "sync":
          return (ref3 = this.player) != null ? ref3.force_resync = true : void 0;

        case "seek":
          return (ref4 = this.player) != null ? ref4.seekTo(data.to, data.paused) : void 0;

        case "destroy":
          this.dontBroadcast = false;
          this.stopBroadcast();

          if (this.player) {
            this.player.destroy();
            this.player = null;
            return this.broadcastState(-666);
          }

      }
    },
    CMD_navigate: function CMD_navigate(data) {
      if (data.reload) {
        return window.location.reload();
      } else if (data.location) {
        return window.location.href = data.location;
      }
    },
    CMD_session_index: function CMD_session_index(data) {
      return this.index = data.index;
    },
    CMD_require_username: function CMD_require_username(data) {
      var hparams, p;
      this.enableInput();
      this.CMD_desired({
        ctype: "StuiCreateForm"
      });

      if (data.maxLength != null) {
        this.input.attr("maxLength", data.maxLength);
      }

      this.status.text("Choose name:"); // check hash params

      if (data.autofill === false) {
        return;
      }

      hparams = this.getHashParams();

      if (p = hparams.user || hparams.username || hparams.name) {
        return this.connection.send(p);
      }
    },
    CMD_username: function CMD_username(data) {
      var ch, cmd, hparams, ref1;
      this.name = data.username;
      this.input.removeAttr("maxLength");
      this.status.text("".concat(this.name, ":"));

      if ((ref1 = this.player) != null) {
        if (typeof ref1.clientUpdate === "function") {
          ref1.clientUpdate();
        }
      } // check hash params


      hparams = this.getHashParams();

      if (ch = hparams.channel || hparams.join) {
        this.connection.send("/join ".concat(ch));
      }

      if (hparams.control) {
        cmd = "/control ".concat(hparams.control);

        if (hparams.password != null) {
          cmd += " ".concat(hparams.password);
        }

        return this.connection.send(cmd);
      }
    },
    CMD_update_single_subscriber: function CMD_update_single_subscriber(resp) {
      var _el, changeAttr, changeHTML, data, el, k, ref1, v;

      data = (resp != null ? resp.data : void 0) || {};

      if (data.index == null) {
        return;
      }

      el = this.clients.find("[data-client-index=".concat(data.index, "]"));

      if (!el.length || data.state.istate === -666) {
        _el = $(this.buildSubscriberElement());

        _el.attr("data-client-index", data.index);

        if (el.length) {
          el.replaceWith(_el);
        } else {
          this.clients.append(_el);
        }

        el = _el;
      }

      changeHTML = function changeHTML(el, v) {
        if (!el.length) {
          return;
        }

        if (el.html() !== v) {
          el.html(v);
        }

        return el;
      };

      changeAttr = function changeAttr(el, a, v) {
        if (!el.length) {
          return;
        }

        if (el.attr(a) !== v) {
          el.attr(a, v);
        }

        return el;
      };

      for (k in data) {
        v = data[k];
        changeHTML(el.find("[data-attr=".concat(k, "]")), "" + v);
      }

      ref1 = data.state;

      for (k in ref1) {
        v = ref1[k];
        changeHTML(el.find("[data-attr=".concat(k, "]")), "" + v);
      }

      el.find("[data-attr=progress-bar-buffered]").css({
        width: "".concat((data.state.loaded_fraction || 0) * 100, "%")
      });
      el.find("[data-attr=progress-bar-position]").css({
        left: "".concat(data.state.seek <= 0 ? 0 : data.state.seek / data.state.playtime * 100, "%")
      });

      if (data.icon) {
        changeAttr(el.find("[data-attr=icon-ctn] i"), "class", "fa fa-".concat(data.icon, " ").concat(data.icon_class));
      }

      if (data.control) {
        changeAttr(el.find("[data-attr=admin-ctn] i"), "class", "fa fa-shield text-info");
        changeAttr(el.find("[data-attr=admin-ctn] i"), "title", "admin");
      }

      if (data.isHost) {
        changeAttr(el.find("[data-attr=admin-ctn] i"), "class", "fa fa-shield text-danger");
        changeAttr(el.find("[data-attr=admin-ctn] i"), "title", "HOST");
      }

      changeAttr(el.find("[data-attr=drift-ctn] i"), "class", "fa fa-".concat(data.drift ? data.drift > 0 ? "backward" : "forward" : "circle-o-notch", " text-warning"));
      changeHTML(el.find("[data-attr=drift]"), el.find("[data-attr=drift]").html().replace("-", ""));

      if (this.index != null && data.index === this.index) {
        return this.drift = parseFloat(data.drift);
      }
    },
    CMD_subscriber_list: function CMD_subscriber_list(data) {
      var j, len, ref1, results, sub, subs;
      this.clients.html(""); // get ordered list

      subs = data.subscribers.sort(function (a, b) {
        if (a.isHost && !b.isHost) {
          return -1;
        } else {
          return 1;
        }
      });
      subs = subs.sort(function (a, b) {
        if (a.control && !b.control) {
          return -1;
        } else {
          return 1;
        }
      });
      ref1 = data.subscribers;
      results = [];

      for (j = 0, len = ref1.length; j < len; j++) {
        sub = ref1[j];
        results.push(this.CMD_update_single_subscriber({
          data: sub
        }));
      }

      return results;
    }
  };

  window.SyncTubeClient_Player_HtmlVideo = SyncTubeClient_Player_HtmlVideo = function () {
    var SyncTubeClient_Player_HtmlVideo =
    /*#__PURE__*/
    function () {
      function SyncTubeClient_Player_HtmlVideo(client1) {
        var _this10 = this;

        _classCallCheck(this, SyncTubeClient_Player_HtmlVideo);

        this.client = client1;
        this.video = $("<video>", {
          id: "view_video",
          width: "100%",
          height: "100%",
          controls: true
        }).appendTo(this.client.view);
        this.volumeRestored = false; // events

        this.video.on("loadeddata", function () {
          var ref1, vol; // restore saved volume

          if (_this10.volumeRestored) {
            return;
          }

          _this10.volumeRestored = true;
          vol = (ref1 = _this10.client.history) != null ? ref1.LSload("player_volume") : void 0;

          if (vol != null) {
            _this10.client.debug("Restored player volume ".concat(vol / 100));

            return _this10.video.get(0).volume = vol / 100;
          }
        });
        this.video.on("click", function () {
          if (!(_this10.client.control || !_this10.everPlayed)) {
            return;
          }

          if (_this10.getState() === 1) {
            return _this10.pause();
          } else {
            return _this10.play();
          }
        }); //@video.on "canplay", => console.log "canplay", (new Date).toISOString()

        this.video.on("canplaythrough", function () {
          return _this10.sendReady();
        });
        this.video.on("error", function () {
          return _this10.error = _this10.video.get(0).error;
        });
        this.video.on("playing", function () {
          return _this10.sendResume();
        });
        this.video.on("pause", function () {
          if (_this10.getCurrentTime() !== _this10.getDuration()) {
            return _this10.sendPause();
          }
        });
        this.video.on("timeupdate", function () {
          if (!_this10.seeking) {
            return _this10.lastKnownTime = _this10.getCurrentTime();
          }
        });
        this.video.on("ended", function () {
          if (_this10.getCurrentTime() === _this10.getDuration()) {
            return _this10.sendEnded();
          }
        });
        this.video.on("seeking", function () {
          return _this10.seeking = true;
        });
        this.video.on("volumechange", function () {
          return _this10.rememberVolume();
        });
        this.video.on("seeked", function (a) {
          _this10.seeking = false;

          if (_this10.systemSeek) {
            return _this10.systemSeek = false;
          } else {
            return _this10.sendSeek();
          }
        });
      }

      _createClass(SyncTubeClient_Player_HtmlVideo, [{
        key: "destroy",
        value: function destroy() {
          this.rememberVolume();
          return this.video.remove();
        }
      }, {
        key: "updateDesired",
        value: function updateDesired(data) {
          var lastPacketDiff;
          console.log(data.state);

          if (data.state === "play") {
            this.video.attr("autoplay", "autoplay");
          } else {
            this.video.removeAttr("autoplay");
          }

          if (data.url !== this.video.attr("src")) {
            this.client.debug("switching video from", this.getUrl(), "to", data.url);
            this.video.attr("src", data.url);
            this.error = false;
            this.playing = false;
            this.everPlayed = false;
            this.client.startBroadcast();
            this.client.broadcastState();
          }

          if (data.loop) {
            this.video.attr("loop", "loop");

            if (this.getCurrentTime() === this.getDuration() && this.getDuration() > 0) {
              this.play();
            }
          } else {
            this.video.removeAttr("loop");
          }

          if (!this.error && this.getState() === 1 && data.state === "pause") {
            this.client.debug("pausing playback", data.state, data.seek, this.getState());
            this.systemPause = true;
            this.pause();
            this.seekTo(data.seek, true);
            return;
          }

          if (!this.error && this.getState() !== 1 && data.state === "play") {
            lastPacketDiff = this.client.lastPacketSent ? new Date() - this.client.lastPacketSent : null;

            if (lastPacketDiff != null && lastPacketDiff < 75 && this.getState() === 0) {
              this.client.debug("ignore starting playback, stopped and we just sent packet", lastPacketDiff);
            } else {
              this.client.debug("starting playback, state:", this.getState());
              this.systemResume = true;
              this.play();
            }
          }

          if (Math.abs(this.client.drift * 1000) > this.client.opts.synced.maxDrift || this.force_resync || data.force) {
            this.force_resync = false;
            this.client.debug("seek to correct drift", this.client.drift, data.seek);

            if (!(this.getCurrentTime() === 0 && data.seek === 0)) {
              return this.seekTo(data.seek, true);
            }
          }
        }
      }, {
        key: "getState",
        value: function getState() {
          if (this.video.get(0).readyState === 0) {
            // uninitalized
            return -1;
          }

          if (this.video.get(0).readyState === 2 || this.video.get(0).readyState === 3) {
            // buffering
            return 3;
          }

          if (this.getCurrentTime() === this.getDuration() && this.video.get(0).paused) {
            // ended playback
            return 0;
          } // paused or playing


          if (this.video.get(0).paused) {
            return 2;
          } else if (this.playing) {
            return 1;
          } else {
            return -1;
          }
        }
      }, {
        key: "getUrl",
        value: function getUrl() {
          return this.video.get(0).currentSrc;
        }
      }, {
        key: "play",
        value: function play() {
          if (this.video.length) {
            return this.video.get(0).play();
          }
        }
      }, {
        key: "pause",
        value: function pause() {
          if (this.video.length) {
            return this.video.get(0).pause();
          }
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (this.seeking) {
            return this.lastKnownTime;
          } else {
            return this.video.get(0).currentTime;
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (this.video.get(0).seekable.length) {
            return this.video.get(0).seekable.end(0);
          } else {
            return 0;
          }
        }
      }, {
        key: "seekTo",
        value: function seekTo(time) {
          var paused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          this.systemSeek = true;
          return this.video.get(0).currentTime = time;
        }
      }, {
        key: "getLoadedFraction",
        value: function getLoadedFraction() {
          var cur, dur, end, j, maxbuf, n, ref1, start;
          maxbuf = 0;
          cur = this.getCurrentTime();
          dur = this.getDuration();

          if (!dur) {
            return 0;
          }

          for (n = j = 0, ref1 = this.video.get(0).buffered.length; 0 <= ref1 ? j < ref1 : j > ref1; n = 0 <= ref1 ? ++j : --j) {
            start = this.video.get(0).buffered.start(n);
            end = this.video.get(0).buffered.end(n);

            if (cur >= start && cur <= end) {
              maxbuf = end;
              break;
            } else if (end > maxbuf) {
              maxbuf = end;
            }
          }

          return parseFloat(maxbuf) / parseFloat(dur);
        }
      }, {
        key: "sendSeek",
        value: function sendSeek() {
          var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getCurrentTime();

          if (!this.client.dontBroadcast) {
            return this.client.sendControl("/seek ".concat(time));
          }
        }
      }, {
        key: "sendReady",
        value: function sendReady() {
          return this.client.sendControl("/ready");
        }
      }, {
        key: "sendResume",
        value: function sendResume() {
          this.everPlayed = true;
          this.playing = true;

          if (this.systemResume) {
            this.systemResume = false;
          } else {
            if (!this.client.dontBroadcast) {
              this.client.sendControl("/resume");
            }
          }

          return this.client.broadcastState();
        }
      }, {
        key: "sendPause",
        value: function sendPause() {
          this.playing = false;

          if (this.systemPause) {
            this.systemPause = false;
          } else {
            if (!this.client.dontBroadcast) {
              this.client.sendControl("/pause");
            }
          }

          return this.client.broadcastState();
        }
      }, {
        key: "sendEnded",
        value: function sendEnded() {
          this.playing = false;

          if (this.everPlayed) {
            return this.client.broadcastState();
          }
        }
      }, {
        key: "rememberVolume",
        value: function rememberVolume() {
          var ref1, stored, vol;

          if (this.client.history == null) {
            return;
          }

          vol = ((ref1 = this.video.get(0)) != null ? ref1.volume : void 0) * 100;
          stored = this.client.history.LSload("player_volume");

          if (vol != null && stored !== vol) {
            this.client.debug("Remembered player volume ".concat(vol));
            return this.client.history.LSsave("player_volume", vol);
          }
        }
      }]);

      return SyncTubeClient_Player_HtmlVideo;
    }();

    ;
    SyncTubeClient_Player_HtmlVideo.prototype.ctype = "HtmlVideo";
    return SyncTubeClient_Player_HtmlVideo;
  }.call(this);

  window.SyncTubeClient_Player_StuiKicked = SyncTubeClient_Player_StuiKicked = function () {
    var SyncTubeClient_Player_StuiKicked =
    /*#__PURE__*/
    function () {
      function SyncTubeClient_Player_StuiKicked(client1) {
        var _this11 = this;

        _classCallCheck(this, SyncTubeClient_Player_StuiKicked);

        this.client = client1;
        console.log(this.client.view);
        this.vp = $("<div>", {
          id: "view_stui_kicked",
          width: "100%",
          height: "100%"
        }).fadeIn(3000).appendTo(this.client.view);
        this.buildView();
        this.vp.on("click", "a", function () {
          _this11.client.CMD_desired({
            ctype: "StuiCreateForm"
          });

          return false;
        });
      }

      _createClass(SyncTubeClient_Player_StuiKicked, [{
        key: "destroy",
        value: function destroy() {
          return this.vp.remove();
        }
      }, {
        key: "buildView",
        value: function buildView() {
          return this.vp.append("<div class=\"flexcentered\" style=\"color: rgba(255, 255, 255, 0.88);\">\n  <div style=\"max-width: 800px\">\n    <div class=\"alert alert-danger\">\n      <h1 class=\"alert-heading\"><i class=\"fa fa-warning\"></i> You got kicked!</h1>\n      <big><strong data-reason>you got kicked by a channel or server admin</strong></big>\n    </div>\n    <a href=\"#\" class=\"btn btn-primary\" style=\"display: none\">got it</a>\n  </div>\n</div>");
        }
      }, {
        key: "updateDesired",
        value: function updateDesired(data) {
          if (data.info.reason) {
            this.vp.find("[data-reason]").html(data.info.reason);
          }

          if (data.info.type !== "session_kicked") {
            return this.vp.find("a").show();
          }
        } // null api functions

      }, {
        key: "getUrl",
        value: function getUrl() {
          return "STUI:CreateForm";
        }
      }, {
        key: "getState",
        value: function getState() {
          return -1;
        }
      }, {
        key: "getLoadedFraction",
        value: function getLoadedFraction() {
          return 1;
        }
      }, {
        key: "play",
        value: function play() {}
      }, {
        key: "pause",
        value: function pause() {}
      }, {
        key: "seekTo",
        value: function seekTo(time) {
          var paused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {}
      }, {
        key: "getDuration",
        value: function getDuration() {}
      }]);

      return SyncTubeClient_Player_StuiKicked;
    }();

    ;
    SyncTubeClient_Player_StuiKicked.prototype.ctype = "StuiKicked";
    return SyncTubeClient_Player_StuiKicked;
  }.call(this);

  window.SyncTubeClient_Player_StuiCreateForm = SyncTubeClient_Player_StuiCreateForm = function () {
    var SyncTubeClient_Player_StuiCreateForm =
    /*#__PURE__*/
    function () {
      function SyncTubeClient_Player_StuiCreateForm(client1) {
        var _this12 = this;

        _classCallCheck(this, SyncTubeClient_Player_StuiCreateForm);

        this.client = client1;
        this.vp = $("<div>", {
          id: "view_stui_create_form",
          width: "100%",
          height: "100%"
        }).fadeIn(3000).appendTo(this.client.view);
        this.buildForm();
        this.clientUpdate();
        this.vp.on("focus", "input,button", function (ev) {
          if ($(ev.target).attr("name") === "name") {
            return;
          }

          _this12.vp.find("input,button").attr("data-last-focused", false);

          return $(ev.target).attr("data-last-focused", true);
        });
        this.vp.on("submit", "form", function (ev) {
          var cmd, control, data, fd, fdata, j, len;
          fdata = $(ev.target).serializeArray();
          control = _this12.vp.find("input[data-last-focused=true],button[data-last-focused=true]").attr("name") === "channel_password";

          if (_this12.vp.find("input[name=channel_password]").val()) {
            control = true;
          }

          data = {};

          for (j = 0, len = fdata.length; j < len; j++) {
            fd = fdata[j];
            data[fd.name] = fd.value;
          }

          _this12.vp.find(".invalid-feedback").remove();

          _this12.vp.find("input.is-invalid").removeClass("is-invalid");

          if (!_this12.client.name && !data.name) {
            $("<div class=\"invalid-feedback\">choose a name</div>").insertAfter(_this12.vp.find("input[name=name]").addClass("is-invalid"));
            return false;
          } // space in name


          if ((data.name + "").match(/\s+/)) {
            $("<div class=\"invalid-feedback\">may not contain white spaces</div>").appendTo(_this12.vp.find("input[name=name]").addClass("is-invalid").parent());
            return false;
          } // space in channel


          if ((data.channel + "").match(/\s+/)) {
            $("<div class=\"invalid-feedback\">may not contain white spaces</div>").appendTo(_this12.vp.find("input[name=channel]").addClass("is-invalid").parent());
            return false;
          } // space in pw


          if ((data.channel_password + "").match(/\s+/)) {
            $("<div class=\"invalid-feedback\">may not contain white spaces</div>").appendTo(_this12.vp.find("input[name=channel_password]").addClass("is-invalid").parent());
            return false;
          }

          cmd = "/".concat(control ? "control" : "join", " ").concat(data.channel);

          if (control && data.channel_password) {
            cmd += " ".concat(data.channel_password);
          }

          if (!_this12.client.name) {
            _this12.client.connection.send(data.name);
          } else if (data.name && _this12.client.name !== data.name) {
            _this12.client.connection.send("/rename ".concat(data.name));
          }

          if (data.channel) {
            _this12.client.connection.send(cmd);
          }

          return false;
        });
      }

      _createClass(SyncTubeClient_Player_StuiCreateForm, [{
        key: "destroy",
        value: function destroy() {
          return this.vp.remove();
        }
      }, {
        key: "buildForm",
        value: function buildForm() {
          return this.vp.append("<div class=\"flexcentered\" style=\"color: rgba(255, 255, 255, 0.88);\">\n  <div style=\"max-width: 800px\">\n    <div style=\"margin-bottom: 50px\"><h1>Welcome to Sync<span style=\"color: #ff0201\">Tube</span></h1></div>\n    <form class=\"form-horizontal\" id=\"optform\" style=\"max-width: 400px; margin: 0px auto\">\n      <div class=\"form-group\"><input type=\"text\" class=\"form-control outline-danger\" placeholder=\"tell me your name (no spaces)\" name=\"name\" autofocus=\"autofocus\"></div>\n      <div class=\"form-group text-center\">and join a</div>\n      <div class=\"form-group input-group\">\n        <input type=\"text\" class=\"form-control\" placeholder=\"channel (no spaces)\" name=\"channel\">\n        <div class=\"input-group-append\">\n          <button class=\"btn btn-outline-inverse btn-success\" name=\"channel\" type=\"submit\" value=\"join\">join</button>\n        </div>\n      </div>\n      <div class=\"form-group text-center\">or be a host</div>\n      <div class=\"form-group input-group text-center\">\n        <input type=\"password\" class=\"form-control\" placeholder=\"channel password (optional)\" name=\"channel_password\">\n        <div class=\"input-group-append\">\n          <button class=\"btn btn-outline-inverse btn-primary\" type=\"submit\" name=\"channel_password\" value=\"control\">create/control</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>");
        }
      }, {
        key: "clientUpdate",
        value: function clientUpdate() {
          var hparams, x;
          hparams = this.client.getHashParams();

          if (this.client.name) {
            this.vp.find("input[name=name]").val(this.client.name);
          }

          if (x = hparams.control || hparams.channel || hparams.join) {
            this.vp.find("input[name=channel]").val(x);
          }

          if (x = hparams.password) {
            return this.vp.find("input[name=channel_password]").val(x);
          }
        } // null api functions

      }, {
        key: "updateDesired",
        value: function updateDesired(data) {}
      }, {
        key: "getUrl",
        value: function getUrl() {
          return "STUI:CreateForm";
        }
      }, {
        key: "getState",
        value: function getState() {
          return -1;
        }
      }, {
        key: "getLoadedFraction",
        value: function getLoadedFraction() {
          return 1;
        }
      }, {
        key: "play",
        value: function play() {}
      }, {
        key: "pause",
        value: function pause() {}
      }, {
        key: "seekTo",
        value: function seekTo(time) {
          var paused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {}
      }, {
        key: "getDuration",
        value: function getDuration() {}
      }]);

      return SyncTubeClient_Player_StuiCreateForm;
    }();

    ;
    SyncTubeClient_Player_StuiCreateForm.prototype.ctype = "StuiCreateForm";
    return SyncTubeClient_Player_StuiCreateForm;
  }.call(this);

  window.SyncTubeClient_Player_HtmlFrame = SyncTubeClient_Player_HtmlFrame = function () {
    var SyncTubeClient_Player_HtmlFrame =
    /*#__PURE__*/
    function () {
      function SyncTubeClient_Player_HtmlFrame(client1) {
        var _this13 = this;

        _classCallCheck(this, SyncTubeClient_Player_HtmlFrame);

        this.client = client1;
        this.state = -1;
        this.loaded = 0;
        this.frame = $("<iframe>", {
          id: "view_frame",
          width: "100%",
          height: "100%"
        }).appendTo(this.client.view);
        this.frame.on("load", function () {
          _this13.state = _this13.loaded = 1;
          return _this13.client.broadcastState();
        });
      }

      _createClass(SyncTubeClient_Player_HtmlFrame, [{
        key: "destroy",
        value: function destroy() {
          return this.frame.remove();
        }
      }, {
        key: "updateDesired",
        value: function updateDesired(data) {
          if (data.url !== this.frame.attr("src")) {
            this.loaded = 0;
            this.state = 3;
            this.frame.attr("src", data.url);
            return this.client.broadcastState();
          }
        }
      }, {
        key: "getUrl",
        value: function getUrl() {
          return this.frame.attr("src");
        }
      }, {
        key: "getState",
        value: function getState() {
          return this.state;
        }
      }, {
        key: "getLoadedFraction",
        value: function getLoadedFraction() {
          return this.loaded;
        } // null api functions

      }, {
        key: "play",
        value: function play() {}
      }, {
        key: "pause",
        value: function pause() {}
      }, {
        key: "seekTo",
        value: function seekTo(time) {
          var paused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {}
      }, {
        key: "getDuration",
        value: function getDuration() {}
      }]);

      return SyncTubeClient_Player_HtmlFrame;
    }();

    ;
    SyncTubeClient_Player_HtmlFrame.prototype.ctype = "HtmlFrame";
    return SyncTubeClient_Player_HtmlFrame;
  }.call(this);

  window.SyncTubeClient_Player_Youtube = SyncTubeClient_Player_Youtube = function () {
    var SyncTubeClient_Player_Youtube =
    /*#__PURE__*/
    function () {
      function SyncTubeClient_Player_Youtube(client1) {
        _classCallCheck(this, SyncTubeClient_Player_Youtube);

        this.client = client1;
      }

      _createClass(SyncTubeClient_Player_Youtube, [{
        key: "destroy",
        value: function destroy() {
          var ref1;
          this.rememberVolume();

          if ((ref1 = this.api) != null) {
            ref1.destroy();
          }

          this.api = null;
          return this.pauseEnsured();
        }
      }, {
        key: "updateDesired",
        value: function updateDesired(data) {
          var current_ytid, lastPacketDiff, ref1, ref2;
          this.rememberVolume();

          if (!this.api) {
            this.loadVideo(data.url, data.state !== "play", data.seek);
            this.ensurePause(data);
            return;
          }

          current_ytid = (ref1 = this.getUrl()) != null ? (ref2 = ref1.match(/([A-Za-z0-9_\-]{11})/)) != null ? ref2[0] : void 0 : void 0;

          if (current_ytid !== data.url) {
            this.client.debug("switching video from", current_ytid, "to", data.url);
            this.loadVideo(data.url);
            return;
          }

          if (this.getState() === 1 && data.state === "pause") {
            this.client.debug("pausing playback, state:", this.getState());
            this.pause();
            this.seekTo(data.seek, true);
            this.ensurePause(data);
            return;
          }

          if (this.getState() !== 1 && data.state === "play") {
            lastPacketDiff = this.client.lastPacketSent ? new Date() - this.client.lastPacketSent : null;

            if (lastPacketDiff != null && lastPacketDiff < 75 && this.getState() === 0) {
              this.client.debug("ignore starting playback, stopped and we just sent packet", lastPacketDiff);
            } else {
              this.client.debug("starting playback, state:", this.getState());
              this.pauseEnsured("starting playback");
              this.play();
            }

            return;
          }

          if (Math.abs(this.client.drift * 1000) > this.client.opts.synced.maxDrift || this.force_resync || data.force) {
            this.force_resync = false;
            this.client.debug("seek to correct drift", this.client.drift, data.seek, this.getState());

            if (!(this.getCurrentTime() === 0 && data.seek === 0)) {
              this.seekTo(data.seek, true);
            } // ensure paused player at correct position when it was cued
            // seekTo on a cued video will start playback delayed


            return this.ensurePause(data);
          }
        }
      }, {
        key: "seekTo",
        value: function seekTo(time) {
          var paused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var ref1, ref2, ref3;

          if ((ref1 = this.api) != null) {
            if (typeof ref1.seekTo === "function") {
              ref1.seekTo(time, true);
            }
          }

          if (paused) {
            return (ref2 = this.player) != null ? ref2.pause() : void 0;
          } else {
            return (ref3 = this.player) != null ? ref3.play() : void 0;
          }
        }
      }, {
        key: "getState",
        value: function getState() {
          var ref1;

          if (((ref1 = this.api) != null ? ref1.getPlayerState : void 0) != null) {
            return this.api.getPlayerState();
          } else {
            return -1;
          }
        }
      }, {
        key: "play",
        value: function play() {
          var ref1;
          return (ref1 = this.api) != null ? typeof ref1.playVideo === "function" ? ref1.playVideo() : void 0 : void 0;
        }
      }, {
        key: "pause",
        value: function pause() {
          var ref1;
          return (ref1 = this.api) != null ? typeof ref1.pauseVideo === "function" ? ref1.pauseVideo() : void 0 : void 0;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          var ref1;

          if (((ref1 = this.api) != null ? ref1.getCurrentTime : void 0) != null) {
            return this.api.getCurrentTime();
          } else {
            return 0;
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          var ref1;

          if (((ref1 = this.api) != null ? ref1.getDuration : void 0) != null) {
            return this.api.getDuration();
          } else {
            return 0;
          }
        }
      }, {
        key: "getLoadedFraction",
        value: function getLoadedFraction() {
          var ref1;

          if (((ref1 = this.api) != null ? ref1.getVideoLoadedFraction : void 0) != null) {
            return this.api.getVideoLoadedFraction();
          } else {
            return 0;
          }
        }
      }, {
        key: "getUrl",
        value: function getUrl() {
          var ref1, ref2, ref3;
          return (ref1 = this.api) != null ? typeof ref1.getVideoUrl === "function" ? (ref2 = ref1.getVideoUrl()) != null ? (ref3 = ref2.match(/([A-Za-z0-9_\-]{11})/)) != null ? ref3[0] : void 0 : void 0 : void 0 : void 0;
        } // ----------------------

      }, {
        key: "loadYTAPI",
        value: function loadYTAPI(callback) {
          var firstScriptTag, tag;

          if (document.YouTubeIframeAPIHasLoaded) {
            if (typeof callback === "function") {
              callback();
            }

            return;
          }

          window.onYouTubeIframeAPIReady = function () {
            document.YouTubeIframeAPIHasLoaded = true;
            return typeof callback === "function" ? callback() : void 0;
          };

          tag = document.createElement('script');
          tag.src = "https://www.youtube.com/iframe_api";
          firstScriptTag = document.getElementsByTagName('script')[0];
          return firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }
      }, {
        key: "loadVideo",
        value: function loadVideo(ytid) {
          var _this14 = this;

          var cue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var seek = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          var m;

          if (m = ytid.match(/([A-Za-z0-9_\-]{11})/)) {
            ytid = m[1];
          } else {
            throw "unknown ID";
          }

          return this.loadYTAPI(function () {
            var base, base1;

            if (_this14.api) {
              if (cue) {
                if (typeof (base = _this14.api).cueVideoById === "function") {
                  base.cueVideoById(ytid, seek);
                }
              } else {
                if (typeof (base1 = _this14.api).loadVideoById === "function") {
                  base1.loadVideoById(ytid, seek);
                }
              }

              return _this14.api;
            } else {
              return _this14.api = new YT.Player('view', {
                videoId: ytid,
                height: '100%',
                width: '100%',
                //playerVars: controls: 0
                events: {
                  onReady: function onReady(ev) {
                    var ref1, vol; // restore saved volume

                    vol = (ref1 = _this14.client.history) != null ? ref1.LSload("player_volume") : void 0;

                    if (vol != null) {
                      _this14.client.debug("Restored player volume ".concat(vol));

                      _this14.api.setVolume(vol);
                    }

                    if (cue) {
                      _this14.api.cueVideoById(ytid, seek);
                    } else {
                      _this14.seekTo(seek);

                      _this14.play();
                    }

                    _this14.client.broadcastState(ev.data);

                    _this14.lastPlayerState = _this14.getState() != null ? _this14.getState() : 2;
                    return _this14.client.startBroadcast();
                  },
                  onStateChange: function onStateChange(ev) {
                    var newState;
                    newState = _this14.getState();

                    if (!_this14.client.dontBroadcast && _this14.lastPlayerState != null && [-1, 2].indexOf(_this14.lastPlayerState) > -1 && [1, 3].indexOf(newState) > -1) {
                      console.log("send resume", _this14.lastPlayerState, newState);

                      _this14.client.sendControl("/resume");
                    } else if (!_this14.client.dontBroadcast && _this14.lastPlayerState != null && [1, 3].indexOf(_this14.lastPlayerState) > -1 && [2].indexOf(newState) > -1) {
                      console.log("send pause");

                      _this14.client.sendControl("/pause");
                    }

                    console.log("state", "was", _this14.lastPlayerState, "is", newState);
                    _this14.lastPlayerState = newState;
                    return _this14.client.broadcastState(ev.data);
                  }
                }
              });
            }
          });
        }
      }, {
        key: "ensurePause",
        value: function ensurePause(data) {
          var _this15 = this;

          var fails;
          this.client.dontBroadcast = true;
          fails = 0;
          clearInterval(this.ensurePauseInterval);
          return this.ensurePauseInterval = setInterval(function () {
            if (_this15.getState() == null) {
              if ((fails += 1) > 100) {
                _this15.pauseEnsured("giving up after ".concat(fails, " attempts"));
              }

              return;
            }

            if (data.state !== "pause") {
              return _this15.pauseEnsured("not paused");
            }

            if (_this15.getCurrentTime() === 0 && data.seek === 0 && [1, 3].indexOf(_this15.getState()) === -1) {
              //return @pauseEnsured("state not 5 or -1 (#{@getState()})") unless [5, -1].indexOf(@getState()) > -1
              return _this15.pauseEnsured("timecode 0");
            }

            if ([-1, 2].indexOf(_this15.getState()) > -1 && Math.abs(_this15.getCurrentTime() - data.seek) <= 0.5) {
              _this15.pauseEnsured("drift done after ".concat(fails, " attempts"));

              return _this15.client.broadcastState();
            } else {
              _this15.seekTo(data.seek, true);

              _this15.play() && _this15.pause();

              if ((fails += 1) > 100) {
                return _this15.pauseEnsured("giving up after ".concat(fails, " attempts"));
              }
            }
          }, 100);
        }
      }, {
        key: "pauseEnsured",
        value: function pauseEnsured(reason) {
          this.client.debug("YT pause ensured (".concat(reason, ")"));
          clearInterval(this.ensurePauseInterval);
          return this.client.dontBroadcast = false;
        }
      }, {
        key: "rememberVolume",
        value: function rememberVolume() {
          var ref1, stored, vol;

          if (this.client.history == null) {
            return;
          }

          vol = (ref1 = this.api) != null ? typeof ref1.getVolume === "function" ? ref1.getVolume() : void 0 : void 0;
          stored = this.client.history.LSload("player_volume");

          if (vol != null && (stored == null || stored !== vol)) {
            this.client.debug("Remembered player volume ".concat(vol));
            return this.client.history.LSsave("player_volume", vol);
          }
        }
      }]);

      return SyncTubeClient_Player_Youtube;
    }();

    ;
    SyncTubeClient_Player_Youtube.prototype.ctype = "Youtube";
    return SyncTubeClient_Player_Youtube;
  }.call(this);

  window.SyncTubeClient_Player_StuiBanned = SyncTubeClient_Player_StuiBanned = function () {
    var SyncTubeClient_Player_StuiBanned =
    /*#__PURE__*/
    function () {
      function SyncTubeClient_Player_StuiBanned(client1) {
        _classCallCheck(this, SyncTubeClient_Player_StuiBanned);

        this.client = client1;
        this.vp = $("<div>", {
          id: "view_stui_banned",
          width: "100%",
          height: "100%"
        }).fadeIn(3000).appendTo(this.client.view);
        this.buildView();
      }

      _createClass(SyncTubeClient_Player_StuiBanned, [{
        key: "destroy",
        value: function destroy() {
          return this.vp.remove();
        }
      }, {
        key: "buildView",
        value: function buildView() {
          return this.vp.append("<div class=\"flexcentered\" style=\"color: rgba(255, 255, 255, 0.88);\">\n  <div style=\"max-width: 800px\">\n    <div class=\"alert alert-danger\">\n      <h1 class=\"alert-heading\"><i class=\"fa fa-warning\"></i> You have been banned!</h1>\n      <big><strong data-reason></strong></big>\n      <big><strong>banned <span data-until></span></strong></big>\n    </div>\n  </div>\n</div>");
        }
      }, {
        key: "updateDesired",
        value: function updateDesired(data) {
          var banned_until, reason;

          if (reason = data.info.reason) {
            this.vp.find("[data-reason]").html("<i class=\"fa fa-comment fa-flip-horizontal\"></i> ".concat(reason, "<hr>"));
          }

          if (data.info.banned_until) {
            banned_until = new Date(data.info.banned_until);
            return this.vp.find("[data-until]").html("until<br>".concat(banned_until.toString()));
          } else {
            return this.vp.find("[data-until]").html("permanently");
          }
        } // null api functions

      }, {
        key: "getUrl",
        value: function getUrl() {
          return "STUI:CreateForm";
        }
      }, {
        key: "getState",
        value: function getState() {
          return -1;
        }
      }, {
        key: "getLoadedFraction",
        value: function getLoadedFraction() {
          return 1;
        }
      }, {
        key: "play",
        value: function play() {}
      }, {
        key: "pause",
        value: function pause() {}
      }, {
        key: "seekTo",
        value: function seekTo(time) {
          var paused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {}
      }, {
        key: "getDuration",
        value: function getDuration() {}
      }]);

      return SyncTubeClient_Player_StuiBanned;
    }();

    ;
    SyncTubeClient_Player_StuiBanned.prototype.ctype = "StuiBanned";
    return SyncTubeClient_Player_StuiBanned;
  }.call(this);

  window.SyncTubeClient_Player_HtmlImage = SyncTubeClient_Player_HtmlImage = function () {
    var SyncTubeClient_Player_HtmlImage =
    /*#__PURE__*/
    function () {
      function SyncTubeClient_Player_HtmlImage(client1) {
        var _this16 = this;

        _classCallCheck(this, SyncTubeClient_Player_HtmlImage);

        this.client = client1;
        this.state = -1;
        this.loaded = 0;
        this.image = $("<img>", {
          id: "view_image",
          height: "100%"
        }).appendTo(this.client.view);
        this.image.on("load", function () {
          _this16.state = _this16.loaded = 1;
          return _this16.client.broadcastState();
        });
      }

      _createClass(SyncTubeClient_Player_HtmlImage, [{
        key: "destroy",
        value: function destroy() {
          return this.image.remove();
        }
      }, {
        key: "updateDesired",
        value: function updateDesired(data) {
          if (data.url !== this.image.attr("src")) {
            this.loaded = 0;
            this.state = 3;
            this.image.attr("src", data.url);
            return this.client.broadcastState();
          }
        }
      }, {
        key: "getUrl",
        value: function getUrl() {
          return this.image.attr("src");
        }
      }, {
        key: "getState",
        value: function getState() {
          return this.state;
        }
      }, {
        key: "getLoadedFraction",
        value: function getLoadedFraction() {
          return this.loaded;
        } // null api functions

      }, {
        key: "play",
        value: function play() {}
      }, {
        key: "pause",
        value: function pause() {}
      }, {
        key: "seekTo",
        value: function seekTo(time) {
          var paused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {}
      }, {
        key: "getDuration",
        value: function getDuration() {}
      }]);

      return SyncTubeClient_Player_HtmlImage;
    }();

    ;
    SyncTubeClient_Player_HtmlImage.prototype.ctype = "HtmlImage";
    return SyncTubeClient_Player_HtmlImage;
  }.call(this);

  window.SyncTubeClient = SyncTubeClient = function () {
    var SyncTubeClient =
    /*#__PURE__*/
    function () {
      _createClass(SyncTubeClient, [{
        key: "include",
        value: function include(addon) {
          this.included.push(addon);
          return this.constructor.include(addon, this);
        }
      }], [{
        key: "include",
        value: function include(obj, into) {
          var key, ref1, value;

          for (key in obj) {
            value = obj[key];

            if (key !== "included" && key !== "start" && key !== "init") {
              this.prototype[key] = value;
            }
          }

          return (ref1 = obj.included) != null ? ref1.call(this, into) : void 0;
        }
      }]);

      function SyncTubeClient() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, SyncTubeClient);

        var base, base1, base2, base3, inc, j, len, ref1, ref2;
        this.opts = opts; // options

        if ((base = this.opts).debug == null) {
          base.debug = false;
        }

        if (this.opts.debug) {
          window.client = this;
        } // synced settings (controlled by server)


        if ((base1 = this.opts).synced == null) {
          base1.synced = {};
        }

        if ((base2 = this.opts.synced).maxDrift == null) {
          base2.maxDrift = 60000; // superseded by server instructions
        }

        if ((base3 = this.opts.synced).packetInterval == null) {
          base3.packetInterval = 10000; // superseded by server instructions
        } // Client data


        this.index = null;
        this.name = null;
        this.control = false;
        this.drift = 0; // modules

        this.include(SyncTubeClient_Util);
        this.include(SyncTubeClient_ControlCodes);
        this.include(SyncTubeClient_Network);
        this.include(SyncTubeClient_UI);
        this.include(SyncTubeClient_CommandBar);
        this.include(SyncTubeClient_Player_Youtube);
        this.include(SyncTubeClient_Player_HtmlFrame);
        this.include(SyncTubeClient_Player_HtmlImage);
        this.include(SyncTubeClient_Player_HtmlVideo);
        this.include(SyncTubeClient_History);
        ref1 = this.included;

        for (j = 0, len = ref1.length; j < len; j++) {
          inc = ref1[j]; //@include SyncTubeClient_ClipboardPoll

          if ((ref2 = inc.init) != null) {
            ref2.apply(this);
          }
        }
      }

      _createClass(SyncTubeClient, [{
        key: "welcome",
        value: function welcome(done) {
          $("#page").hide();
          return typeof done === "function" ? done() : void 0;
        }
      }, {
        key: "start",
        value: function start() {
          var inc, j, len, ref1, ref2;
          ref1 = this.included;

          for (j = 0, len = ref1.length; j < len; j++) {
            inc = ref1[j];

            if ((ref2 = inc.start) != null) {
              ref2.apply(this);
            }
          }

          $("#page").css({
            maxWidth: 500,
            opacity: 0
          });
          $("#page").fadeIn(1250);
          this.delay(50, function () {
            return $(window).resize();
          });
          this.delay(2250, function () {
            $("#welcome").hide(750);
            return $("#page").fadeTo(500, 1);
          });
          return this.listen();
        } // ===========
        // = Logging =
        // ===========

      }, {
        key: "debug",
        value: function debug() {
          if (!this.opts.debug) {
            return;
          }

          for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {
            msg[_key] = arguments[_key];
          }

          msg.unshift("[ST ".concat(new Date().toISOString(), "]"));
          return console.debug.apply(this, msg);
        }
      }, {
        key: "info",
        value: function info() {
          for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            msg[_key2] = arguments[_key2];
          }

          msg.unshift("[ST ".concat(new Date().toISOString(), "]"));
          return console.log.apply(this, msg);
        }
      }, {
        key: "warn",
        value: function warn() {
          for (var _len3 = arguments.length, msg = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            msg[_key3] = arguments[_key3];
          }

          msg.unshift("[ST ".concat(new Date().toISOString(), "]"));
          return console.warn.apply(this, msg);
        }
      }, {
        key: "error",
        value: function error() {
          for (var _len4 = arguments.length, msg = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            msg[_key4] = arguments[_key4];
          }

          msg.unshift("[ST ".concat(new Date().toISOString(), "]"));
          return console.error.apply(this, msg);
        }
      }]);

      return SyncTubeClient;
    }();

    ;
    SyncTubeClient.prototype.VIEW_COMPONENTS = ["content", "view", "input", "input_nofocus", "status", "queue", "playlist", "clients"];
    SyncTubeClient.prototype.included = [];
    return SyncTubeClient;
  }.call(this);

  window.SyncTubeClient_CommandBar = SyncTubeClient_CommandBar =
  /*#__PURE__*/
  function () {
    function SyncTubeClient_CommandBar(client1) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, SyncTubeClient_CommandBar);

      this.client = client1;
      this.opts = opts;
      this.buildDom();
      this.captureInput();
    }

    _createClass(SyncTubeClient_CommandBar, [{
      key: "captureInput",
      value: function captureInput() {
        var _this17 = this;

        $(document).on("keydown keypress keyup", function (ev) {
          return $("[data-alt-class]").each(function (i, el) {
            if (ev.altKey && !$(el).data("isAlted")) {
              $(el).attr("data-was-class", $(el).attr("class"));
              $(el).attr("class", $(el).data("altClass"));
              return $(el).data("isAlted", true);
            } else if (!ev.altKey && $(el).data("isAlted")) {
              $(el).attr("class", $(el).attr("data-was-class"));
              $(el).removeAttr("data-was-class");
              return $(el).data("isAlted", false);
            }
          });
        });
        return $("#command_bar [data-command]").click(function (event) {
          var cmd, el;
          el = $(event.currentTarget);
          cmd = el.data("command");

          if (event.altKey && el.data("altCommand")) {
            cmd = el.data("altCommand");
          }

          _this17.client.connection.send("/" + cmd);

          return false;
        });
      }
    }, {
      key: "updateDesired",
      value: function updateDesired(data) {
        if (data.state === "play") {
          $("#command_bar [data-command=toggle]").removeClass("btn-success").addClass("btn-warning");
          $("#command_bar [data-command=toggle] i").removeClass("fa-play").addClass("fa-pause");
        } else {
          $("#command_bar [data-command=toggle]").removeClass("btn-warning").addClass("btn-success");
          $("#command_bar [data-command=toggle] i").removeClass("fa-pause").addClass("fa-play");
        }

        if (data.loop) {
          $("#command_bar [data-command='loop toggle']").addClass("btn-warning");
          return $("#command_bar [data-command='loop toggle'] i + i").removeClass("fa-toggle-off").addClass("fa-toggle-on");
        } else {
          $("#command_bar [data-command='loop toggle']").removeClass("btn-warning");
          return $("#command_bar [data-command='loop toggle'] i + i").removeClass("fa-toggle-on").addClass("fa-toggle-off");
        }
      }
    }, {
      key: "buildDom",
      value: function buildDom() {
        return $("#second_row").prepend("<div class=\"col col-12\" id=\"command_bar\" style=\"margin-top: 10px; margin-bottom: -5px; opacity: 0.8; display: none\">\n  <div class=\"btn-group btn-group-sm\">\n    <button type=\"button\" data-command=\"seek 0\" title=\"start from 0\" class=\"btn btn-secondary\"><i class=\"fa fa-step-backward\"></i></button>\n    <button type=\"button\" data-command=\"seek -60\" data-alt-command=\"seek --slowmo -60\" title=\"go back(+alt=slowmo) 60 seconds\" class=\"btn btn-secondary\"><i class=\"fa fa-fw fa-backward\" data-alt-class=\"fa fa-fw fa-history\"></i> <small>60</small></button>\n    <button type=\"button\" data-command=\"seek -30\" data-alt-command=\"seek --slowmo -30\" title=\"go back(+alt=slowmo) 30 seconds\" class=\"btn btn-secondary\"><i class=\"fa fa-fw fa-backward\" data-alt-class=\"fa fa-fw fa-history\"></i> <small>30</small></button>\n    <button type=\"button\" data-command=\"seek -10\" data-alt-command=\"seek --slowmo -10\" title=\"go back(+alt=slowmo) 10 seconds\" class=\"btn btn-secondary\"><i class=\"fa fa-fw fa-backward\" data-alt-class=\"fa fa-fw fa-history\"></i> <small>10</small></button>\n  </div>\n\n  <button type=\"button\" data-command=\"toggle\" class=\"btn btn-sm btn-success\" style=\"padding-left: 15px; padding-right: 15px\"><i class=\"fa fa-fw fa-play\"></i></button>\n\n  <div class=\"btn-group btn-group-sm\">\n    <button type=\"button\" data-command=\"seek +10\" title=\"go forward 60 seconds\" class=\"btn btn-secondary\"><i class=\"fa fa-forward\"></i> <small>10</small></button>\n    <button type=\"button\" data-command=\"next\" title=\"next in playlist\" class=\"btn btn-info\" style=\"display: none\"><i class=\"fa fa-step-forward\"></i></button>\n    <button type=\"button\" data-command=\"seek +30\" title=\"go forward 30 seconds\" class=\"btn btn-secondary\"><i class=\"fa fa-forward\"></i> <small>30</small></button>\n    <button type=\"button\" data-command=\"seek +60\" title=\"go forward 10 seconds\" class=\"btn btn-secondary\"><i class=\"fa fa-forward\"></i> <small>60</small></button>\n  </div>\n\n  <button title=\"toggle loop\" type=\"button\" data-command=\"loop toggle\" class=\"btn btn-secondary btn-sm\"><i class=\"fa fa-refresh\"></i> <i class=\"fa fa-toggle-on\"></i></button>\n</div>");
      }
    }, {
      key: "show",
      value: function show() {
        return $("#command_bar").show(200, function () {
          return $(window).resize();
        });
      }
    }, {
      key: "hide",
      value: function hide() {
        return $("#command_bar").hide(200, function () {
          return $(window).resize();
        });
      }
    }]);

    return SyncTubeClient_CommandBar;
  }();

  window.SyncTubeClient_CommandBar.start = function () {
    return this.commandBar = new SyncTubeClient_CommandBar(this, this.opts.command_bar);
  };

  window.SyncTubeClient_History = SyncTubeClient_History =
  /*#__PURE__*/
  function () {
    function SyncTubeClient_History(client1) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, SyncTubeClient_History);

      var base, base1;
      this.client = client1;
      this.opts = opts;

      if ((base = this.opts).limit == null) {
        base.limit = 100;
      }

      if ((base1 = this.opts).save == null) {
        base1.save = true; // @todo set to false
      }

      this.log = this.opts.save ? this.loadLog() : [];
      this.index = -1;
      this.buffer = null;
      this.captureInput();
    }

    _createClass(SyncTubeClient_History, [{
      key: "captureInput",
      value: function captureInput() {
        var _this18 = this;

        return this.client.input.keydown(function (event) {
          if (event.keyCode === 27) {
            // ESC
            if (_this18.index !== -1) {
              _this18.index = -1;

              if (_this18.buffer != null) {
                _this18.client.input.val(_this18.buffer);
              }

              _this18.buffer = null;
            }

            return true;
          }

          if (event.keyCode === 38) {
            // ArrowUp
            if (_this18.log[_this18.index + 1] == null) {
              return false;
            }

            if (_this18.index === -1) {
              _this18.buffer = _this18.client.input.val();
            }

            _this18.index++;

            _this18.client.input.val(_this18.log[_this18.index]);

            return false;
          }

          if (event.keyCode === 40) {
            // ArrowDown
            if (_this18.index === 0) {
              _this18.index = -1;

              _this18.restoreBuffer();

              return false;
            }

            if (_this18.log[_this18.index - 1] == null) {
              return false;
            }

            _this18.index--;

            _this18.client.input.val(_this18.log[_this18.index]);

            return false;
          }

          return true;
        });
      }
    }, {
      key: "restoreBuffer",
      value: function restoreBuffer() {
        if (this.buffer != null) {
          this.client.input.val(this.buffer);
        }

        return this.buffer = null;
      }
    }, {
      key: "append",
      value: function append(cmd) {
        if (cmd && (!this.log.length || this.log[0] !== cmd)) {
          this.log.unshift(cmd);
        }

        while (this.log.length > this.opts.limit) {
          this.log.pop();
        }

        if (this.opts.save) {
          this.saveLog();
        }

        this.index = -1;
        return this.buffer = null;
      }
    }, {
      key: "saveLog",
      value: function saveLog() {
        return this.LSsave("client_history", this.log);
      }
    }, {
      key: "loadLog",
      value: function loadLog() {
        return this.LSload("client_history", []);
      }
    }, {
      key: "LSsave",
      value: function LSsave(key, value) {
        return localStorage.setItem("synctube_".concat(key), JSON.stringify(value));
      }
    }, {
      key: "LSload",
      value: function LSload(key, defVal) {
        var e;

        try {
          return JSON.parse(localStorage.getItem("synctube_".concat(key))) || defVal;
        } catch (error1) {
          e = error1;
          return defVal;
        }
      }
    }]);

    return SyncTubeClient_History;
  }();

  window.SyncTubeClient_History.start = function () {
    return this.history = new SyncTubeClient_History(this, this.opts.history);
  };

  window.SyncTubeClient_UI = {
    init: function init() {
      var base, base1, j, l, len, len1, ref1, ref2, results, x;
      this.refocus = false;

      if ((base = this.opts).maxWidth == null) {
        base.maxWidth = 12;
      }

      ref1 = this.VIEW_COMPONENTS;

      for (j = 0, len = ref1.length; j < len; j++) {
        x = ref1[j];

        if ((base1 = this.opts)[x] == null) {
          base1[x] = $("#".concat(x));
        }
      }

      ref2 = this.VIEW_COMPONENTS;
      results = [];

      for (l = 0, len1 = ref2.length; l < len1; l++) {
        x = ref2[l];
        results.push(this[x] = $(this.opts[x]));
      }

      return results;
    },
    start: function start() {
      this.adjustMaxWidth();
      this.captureInput();
      return this.handleWindowResize();
    },
    adjustMaxWidth: function adjustMaxWidth(i) {
      var hparams, maxWidth;
      hparams = this.getHashParams();
      maxWidth = i || hparams.maxWidth || hparams.width || hparams.mw || this.opts.maxWidth;
      return $("#page > .col").attr("class", "col col-".concat(maxWidth));
    },
    handleWindowResize: function handleWindowResize() {
      var _this19 = this;

      $(window).resize(function (ev) {
        var height_both, height_first, height_second, width_second;

        if (!$("#page").is(":visible")) {
          return;
        }

        height_first = $("#first_row").height();
        height_second = $("#second_row").height();
        width_second = $("#second_row").width();
        height_both = height_first + height_second + 30; //ratio = width_second / (height_both + 60)
        //console.log width_second, height_both, window.innerHeight, ratio, window.innerHeight * ratio
        //$("#page").css(maxWidth: window.innerHeight * ratio)

        if (height_both > window.innerHeight && width_second > 500) {
          $("#page").css({
            maxWidth: $("#page").width() - 2
          });
          window.scrollTo(0, 0);

          _this19.delay(1, function () {
            return $(window).resize();
          });
        } else if (window.innerHeight - height_both > 1) {
          $("#page").css({
            maxWidth: $("#page").width() + 2
          });
          window.scrollTo(0, 0);

          _this19.delay(1, function () {
            return $(window).resize();
          });
        }

        if ($("#first_row").width() > 800) {} else {}
      }); //console.log "DEATTACH playlist"
      //$("#playlist").detach().appendTo("#playlist_ctn")
      //console.log "ATTACH playlist"
      //$("#playlist").detach()#.appendTo("#view_ctn")

      return $(window).resize();
    },
    //setTimeout((-> $(window).resize()), 100)
    captureInput: function captureInput() {
      var _this20 = this;

      this.input.keydown(function (event) {
        var i, m, msg, ref1;

        if (event.keyCode !== 13) {
          return true;
        }

        if (!(msg = _this20.input.val())) {
          return;
        }

        if ((ref1 = _this20.history) != null) {
          ref1.append(msg);
        }

        if (msg.charAt(0) === "/") {
          _this20.addSendCommand(msg);
        }

        if (m = msg.match(/^\/(?:mw|maxwidth|width)(?:\s([0-9]+))?$/i)) {
          i = parseInt(m[1]);

          if (m[1] && i >= 1 && i <= 12) {
            _this20.adjustMaxWidth(_this20.opts.maxWidth = i);

            _this20.input.val("");
          } else {
            _this20.content.append("<p>Usage: /maxwidth [1-12]</p>");
          }

          return;
        }

        _this20.connection.send(msg);

        return _this20.disableInput();
      });
      this.input.parent().click(function (event) {
        if (_this20.input.is(":disabled")) {
          return _this20.input_nofocus.focus();
        }
      });
      this.input_nofocus.blur(function (event) {
        return _this20.refocus = false;
      });
      return this.input_nofocus.focus(function (event) {
        return _this20.refocus = true;
      });
    },
    enableInput: function enableInput() {
      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (clear && this.input.is(":disabled")) {
        this.input.val("");
      }

      this.input.removeAttr("disabled");

      if (this.refocus && focus) {
        this.input.focus();
      }

      return this.input;
    },
    disableInput: function disableInput() {
      this.input.attr("disabled", "disabled");
      this.input_nofocus.focus();
      return this.input;
    },
    addError: function addError(error) {
      var dt;
      dt = new Date();
      this.content.append("<p>\n  <strong style=\"color: #ee5f5b\">error</strong>\n  @ ".concat("0".concat(dt.getHours()).slice(-2), ":").concat("0".concat(dt.getMinutes()).slice(-2), "\n  <span style=\"color: #ee5f5b\">").concat(error, "</span>\n</p>"));
      return this.content.scrollTop(this.content.prop("scrollHeight"));
    },
    addMessage: function addMessage(data) {
      var dt, tagname;
      dt = new Date(data.time);
      tagname = data.author === "system" ? "strong" : "span";
      this.content.append("<p>\n  <".concat(tagname, " style=\"color:").concat(data.author_color, "\">").concat(data.author, "</").concat(tagname, ">\n  @ ").concat("0".concat(dt.getHours()).slice(-2), ":").concat("0".concat(dt.getMinutes()).slice(-2), "\n  <span style=\"color: ").concat(data.text_color, "\">").concat(data.text, "</span>\n</p>"));
      return this.content.scrollTop(this.content.prop("scrollHeight"));
    },
    buildSubscriberElement: function buildSubscriberElement() {
      return $("<div data-client-index=\"\">\n  <div class=\"first\">\n    <span data-attr=\"admin-ctn\"><i></i></span>\n    <span data-attr=\"name\"></span>\n  </div>\n  <div class=\"second\">\n    <span data-attr=\"icon-ctn\"><i><span data-attr=\"progress\"></span> <span data-attr=\"timestamp\"></span></i></span>\n    <span data-attr=\"drift-ctn\" style=\"float:right\"><i><span data-attr=\"drift\"></span></i></span>\n    <div data-attr=\"progress-bar\"><div data-attr=\"progress-bar-buffered\"></div><div data-attr=\"progress-bar-position\"></div></div>\n  </div>\n</div>");
    },
    addSendCommand: function addSendCommand(msg) {
      var dt;
      dt = new Date();
      this.content.append("<p style=\"color: #7a8288\">\n  <span><i class=\"fa fa-terminal\"></i></span>\n  @ ".concat("0".concat(dt.getHours()).slice(-2), ":").concat("0".concat(dt.getMinutes()).slice(-2), "\n  <span>").concat(msg, "</span>\n</p>"));
      return this.content.scrollTop(this.content.prop("scrollHeight"));
    }
  }; //window.SyncTubeClient_ClipboardPoll = class SyncTubeClient_ClipboardPoll
  //  constructor: (@client, @opts = {}) ->
  //    @opts.pollrate ?= 1000
  //    @opts.autostartIfGranted ?= true
  //    @running = false
  //    @lastValue = null
  //    @detectAutostart()
  //  detectAutostart: ->
  //    navigator.permissions.query(name: 'clipboard-read').then (status) =>
  //      @start() if @opts.autostartIfGranted && status.state == "granted"
  //      status.onchange = =>
  //        if status.state == "granted"
  //          @start()
  //        else
  //          @stop()
  //  start: ->
  //    @run = true
  //    @client.debug "Started clipboard polling"
  //    @tick()
  //  stop: (wait = true) ->
  //    @run = false
  //    @client.debug "Stopping clipboard polling..."
  //    promise = new Promise (resolve, reject) => @stopped = resolve
  //    @stopped() unless @running
  //    if wait
  //      await promise
  //      @client.debug "Stopped clipboard polling"
  //    promise
  //  tick: ->
  //    if !@run
  //      @running = false
  //      @stopped?()
  //      return
  //    @running = true
  //    try
  //      text = await navigator.clipboard.readText()
  //      if text != @lastValue
  //        @process(text)
  //        @lastValue = text
  //    catch err
  //      # nothing we can do about it :D
  //    finally
  //      setTimeout((=> @tick()), @opts.pollrate)
  //  process: (val) ->
  //    @client.debug "Processing", val
  //window.SyncTubeClient_ClipboardPoll.start = ->
  //  @clipboardPoll = new SyncTubeClient_ClipboardPoll(this, @opts.clipboardPoll)
  // ./client/*.coffee will be inserted here by "npm run build" or "npm run dev"

  $(function () {
    var client;
    client = new SyncTubeClient({
      debug: true,
      clipboardPoll: {
        autostartIfGranted: false
      }
    });
    return client.welcome(function () {
      return client.start();
    });
  });
}).call(void 0);
