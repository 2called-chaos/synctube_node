// Generated by CoffeeScript 2.3.2
(function() {
  var COLORS, SyncTubeServerClient, UTIL;

  COLORS = require("../colors.js");

  UTIL = require("./util.js");

  exports.Class = SyncTubeServerClient = class SyncTubeServerClient {
    debug(...a) {
      return this.server.debug(`[#${this.index}]`, ...a);
    }

    warn(...a) {
      return this.server.warn(`[#${this.index}]`, ...a);
    }

    error(...a) {
      return this.server.error(`[#${this.index}]`, ...a);
    }

    constructor(server) {
      this.server = server;
      this.index = -1;
      if (this.name == null) {
        this.name = null;
      }
      this.control = null;
      this.subscribed = null;
    }

    accept(request) {
      this.request = request;
      this.debug(`Accepting connection from origin ${this.request.origin}`);
      this.connection = this.request.accept(null, this.request.origin);
      this.ip = this.connection.remoteAddress;
      this.index = this.server.clients.push(this) - 1;
      this.connection.on("close", () => {
        return this.disconnect();
      });
      this.debug(`Connection accepted (${this.index}): ${this.ip}`);
      this.sendCode("session_index", {
        index: this.index
      });
      this.sendCode("server_settings", {
        packetInterval: this.server.opts.packetInterval,
        maxDrift: this.server.opts.maxDrift
      });
      this.sendCode("require_username");
      return this;
    }

    listen() {
      this.connection.on("message", (message) => {
        var msg, ref, ref1;
        msg = message.utf8Data;
        if (message.type !== "utf8") {
          this.warn("Received non-utf8 data", message);
          return;
        }
        this.debug(`Received message from ${this.ip}: ${msg}`);
        if (this.name) {
          return this.server.handleMessage(this, message, msg) || ((ref = this.control) != null ? ref.handleMessage(this, message, msg, true) : void 0) || ((ref1 = this.subscribed) != null ? ref1.handleMessage(this, message, msg) : void 0);
        } else {
          return this.setUsername(msg);
        }
      });
      return this;
    }

    disconnect() {
      var ref, ref1;
      this.debug(`Peer ${this.ip} disconnected.`);
      if ((ref = this.control) != null) {
        if (typeof ref.revokeControl === "function") {
          ref.revokeControl(this);
        }
      }
      if ((ref1 = this.subscribed) != null) {
        if (typeof ref1.unsubscribe === "function") {
          ref1.unsubscribe(this);
        }
      }
      // delete reference and reindex clients
      this.server.clients.splice(this.index, 1);
      return this.server.eachClient("reindex");
    }

    reindex() {
      var was_index;
      was_index = this.index;
      this.index = this.server.clients.indexOf(this);
      this.sendCode("session_index", {
        index: this.index
      });
      (this.subscribed != null) && this.sendCode("subscriber_list", {
        channel: this.subscribed.name,
        subscribers: this.subscribed.getSubscriberList(this)
      });
      this.debug(`Reindexed client session from ${was_index} to ${this.index}`);
      return this;
    }

    sendCode(type, data = {}) {
      this.connection.sendUTF(JSON.stringify({
        type: "code",
        data: Object.assign({}, data, {
          type: type
        })
      }));
      return this;
    }

    sendMessage(message, color, author, author_color) {
      this.connection.sendUTF(JSON.stringify({
        type: "message",
        data: {
          author: author,
          author_color: author_color,
          text: message,
          text_color: color,
          time: (new Date()).getTime()
        }
      }));
      return this;
    }

    sendSystemMessage(message, color) {
      return this.sendMessage(message, color || COLORS.red, "system", COLORS.red);
    }

    ack() {
      this.sendCode("ack");
      return true;
    }

    setUsername(name) {
      var _name;
      this.name = UTIL.htmlEntities(name);
      if (this.server.PROTECTED_NAMES.indexOf(this.name.toLowerCase()) > -1) {
        this.name = null;
        this.sendSystemMessage("This name is not allowed!", COLORS.red);
        //@sendCode "require_username", autofill: false
        return this.ack();
      } else if (this.name.slice(0, 8) === "!packet:") {
        // ignore packets
        this.name = null;
        return this.ack();
      } else if (this.name.charAt(0) === "/" || this.name.charAt(0) === "!") {
        this.name = null;
        this.sendSystemMessage("Name may not start with a / or ! character", COLORS.red);
        //@sendCode "require_username", autofill: false
        return this.ack();
      } else {
        if (this.old_name) {
          if (this.subscribed) {
            _name = this.name;
            this.name = this.old_name;
            this.subscribed.broadcast(this, `<i>changed his name to ${_name}</i>`, COLORS.info, COLORS.muted);
            this.name = _name;
          } else {
            this.sendSystemMessage(`You changed your name from ${this.old_name} to ${this.name}!`, COLORS.info);
          }
          this.old_name = null;
        } else {
          this.hello();
        }
      }
      this.sendCode("username", {
        username: this.name
      });
      return this.ack();
    }

    hello() {
      this.sendSystemMessage(`Welcome, ${this.name}!`, COLORS.green);
      this.sendSystemMessage("To create or control a channel type <strong>/control &lt;channel&gt; [password]</strong>", COLORS.info);
      return this.sendSystemMessage("To join an existing channel type <strong>/join &lt;channel&gt;</strong>", COLORS.info);
    }

  };

}).call(this);
